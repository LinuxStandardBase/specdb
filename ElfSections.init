INSERT INTO ElfSections VALUES (1,'.bss',31,'This section holds uninitialized data that contribute to the program\'s memory image. By definition, the system initializes the data with zeros when the program begins to run. The section occupies no file space, as indicated by the section type, SHT_NOBITS',9,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (2,'.comment',31,'This section holds version control information.',2,'0',0,1);
INSERT INTO ElfSections VALUES (3,'.data',31,'This section holds initialized data that contribute to the program\'s memory image.',2,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (4,'.data1',31,'This section holds initialized data that contribute to the program\'s memory image.',2,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (5,'.debug',31,'This section holds information for symbolic debugging. The contents are unspecified. All section names with the prefix .debug hold information for symbolic debugging. The contents of these sections are unspecified.',2,'0',0,1);
INSERT INTO ElfSections VALUES (6,'.dynamic',31,'This section holds dynamic linking information. The section\'s attributes will include the SHF_ALLOC bit. Whether the SHF_WRITE bit is set is processor specific. See Chapter 5 for more information.',7,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (7,'.hash',31,'This section holds a symbol hash table. See ``Hash Table\'\' in Chapter 5 for more information.',6,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (8,'.line',31,'This section holds line number information for symbolic debugging, which describes the correspondence between the source program and the machine code. The contents are unspecified.',2,'0',0,1);
INSERT INTO ElfSections VALUES (9,'.note',31,'This section holds information in the format that ``Note Section\'\' in Chapter 5 describes of the System V Application Binary Interface, Edition 4.1.',8,'0',0,1);
INSERT INTO ElfSections VALUES (10,'.rodata',31,'This section holds read-only data that typically contribute to a non-writable segment in the process image. See ``Program Header\'\' in Chapter 5 for more information.',2,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (11,'.rodata1',31,'This section hold sread-only data that typically contribute to a non-writable segment in the process image. See ``Program Header\'\' in Chapter 5 for more information.',2,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (12,'.shstrtab',31,'This section holds section names.',4,'0',0,1);
INSERT INTO ElfSections VALUES (13,'.strtab',31,'This section holds strings, most commonly the strings that represent the names associated with symbol table entries. If the file has a loadable segment that includes the symbol string table, the section\'s attributes will include the SHF_ALLOC bit; otherwi',4,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (14,'.symtab',31,'This section holds a symbol table, as ``Symbol Table\'\'. in this chapter describes. If the file has a loadable segment that includes the symbol table, the section\'s attributes will include the SHF_ALLOC bit; otherwise, that bit will be off.',3,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (15,'.text',31,'This section holds the ``text,\'\' or executable instructions, of a program.',2,'SHF_ALLOC+SHF_EXECINSTR',0,1);
INSERT INTO ElfSections VALUES (16,'.dynstr',31,'This section holds strings needed for dynamic linking, most commonly the strings that represent the names associated with symbol table entries. See Chapter 5 for more information.',4,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (17,'.dynsym',31,'This section holds the dynamic linking symbol table, as described in ``Symbol Table\'\'. See Chapter 5 for more information.',12,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (18,'.fini',31,'This section holds executable instructions that contribute to the process termination code. That is, when a program exits normally, the system arranges to execute the code in this section.',2,'SHF_ALLOC+SHF_EXECINSTR',0,1);
INSERT INTO ElfSections VALUES (19,'.init',31,'This section holds executable instructions that contribute to the process initialization code. When a program starts to run, the system arranges to execute the code in this section before calling the main program entry point (called main for C programs)',2,'SHF_ALLOC+SHF_EXECINSTR',0,1);
INSERT INTO ElfSections VALUES (20,'.interp',31,'This section holds the path name of a program interpreter. If the file has a loadable segment that includes relocation, the sections\' attributes will include the SHF_ALLOC bit; otherwise, that bit will be off. See Chapter 5 for more information.',2,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (21,'.rel.text',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .text section.',10,'0',0,2);
INSERT INTO ElfSections VALUES (22,'.rel.data',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .data section.',10,'0',0,2);
INSERT INTO ElfSections VALUES (25,'.rel.got',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .got section.',10,'SHF_ALLOC',0,2);
INSERT INTO ElfSections VALUES (26,'.rel.bss',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .bss section.',10,'SHF_ALLOC',0,2);
INSERT INTO ElfSections VALUES (27,'.rel.plt',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .plt section.',10,'SHF_ALLOC',0,2);
INSERT INTO ElfSections VALUES (28,'.note.ABI-tag',10,'Specify ABI details.',8,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (29,'.ctors',10,'This section contains a list of global constructor function pointers.',2,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (30,'.dtors',10,'This section contains a list of global destructor function pointers.',2,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (31,'.gnu.version',10,'This section contains the Symbol Version Table.',19,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (32,'.gnu.version_r',10,'This section contains the Version Requirments.',18,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (33,'.eh_frame',10,'This section contains information necessary for frame unwinding during exception handling. The format is the same as for .debug_frame as described by <XREF LINKEND=\"std.DWARF2\">.',2,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (34,'.stab',10,'This section contains debugging information. The contents are not specified as part of the LSB.',2,'0',0,1);
INSERT INTO ElfSections VALUES (35,'.stabstr',10,'This section contains strings associated with the debugging infomation contained in the .stab section.',4,'0',0,1);
INSERT INTO ElfSections VALUES (37,'.got',33,'This section holds the global offset table. See ``Coding Examples\'\' in Chapter 3, ``Special Sections\'\' in Chapter 4, and ``Global Offset Table\'\' in Chapter 5 of the processor supplement for more information.',2,'SHF_ALLOC+SHF_WRITE',0,2);
INSERT INTO ElfSections VALUES (38,'.plt',33,'This section holds the procedure linkage table.',2,'SHF_ALLOC+SHF_EXECINSTR',0,2);
INSERT INTO ElfSections VALUES (39,'.gnu.version_d',10,'This section contains the Version Definitions.',17,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (41,'.rel.dyn',10,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .dyn section.',10,'SHF_ALLOC',0,2);
INSERT INTO ElfSections VALUES (42,'.fini_array',31,'This section holds an array of function pointers that contributes to a single termination array for the executable or shared object containing the section.',22,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (43,'.init_array',31,'This section holds an array of function pointers that contributes to a single initialization array for the executable or shared object containing the section.',21,' SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (44,'.preinit_array',31,'This section holds an array of function pointers that contributes to a single pre-initialization array for the executable or shared object containing the section.',23,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (45,'.IA_64.archext',58,'This section holds product-specific extension bits. The link editor will perform a logical \"or\" of the extension bits of each object when creating an executable so that it creates only a single .IA_64.archext section in the\r\nexecutable.',27,'0',0,3);
INSERT INTO ElfSections VALUES (46,'.IA_64.pltoff',58,'This section holds local function descriptor entries.',2,'SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT',0,3);
INSERT INTO ElfSections VALUES (47,'.IA_64.unwind',58,'This section holds the unwind function table. The contents are described in the Intel (r) Itanium (tm) Processor Specific ABI.',24,'SHF_ALLOC+SHF_LINK_ORDER',0,3);
INSERT INTO ElfSections VALUES (48,'.IA_64.unwind_info',58,'This section holds stack unwind and and exception handling information. The exception handling information is programming language specific, and is unspecified.',2,'SHF_ALLOC',0,3);
INSERT INTO ElfSections VALUES (49,'.got',58,'This section holds the Global Offset Table. See ``Coding Examples\'\' in Chapter 3, ``Special Sections\'\' in Chapter 4, and ``Global Offset Table\'\' in Chapter 5 of the processor supplement for more information.',2,'SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT',0,3);
INSERT INTO ElfSections VALUES (50,'.plt',58,'This section holds the Procedure Linkage Table.',2,'SHF_ALLOC+SHF_EXECINSTR',0,3);
INSERT INTO ElfSections VALUES (51,'.sbss',58,'This section holds uninitialized data that contribute to the program\'\'s memory image. Data objects contained in this section are recommended to be eight bytes or less in size. The system initializes the data with zeroes when the program begins to run. The section occupies no file space, as indicated by the section type SHT_NOBITS. The .sbss section is placed so it may be accessed using short direct addressing (22 bit offset from gp).',9,'SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT',0,3);
INSERT INTO ElfSections VALUES (52,'.sdata',58,'This section and the .sdata1 section hold initialized data that contribute to the program\'\'s memory image. Data objects contained in this section are recommended to be eight bytes or less in size. The .sdata and .sdata1 sections are placed so they may be accessed using short direct addressing (22 bit offset from gp).',2,'SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT',0,3);
INSERT INTO ElfSections VALUES (53,'.sdata1',58,'See .sdata.',2,'SHF_ALLOC+SHF_WRITE+SHF_IA_64_SHORT',0,3);
INSERT INTO ElfSections VALUES (54,'.rela.IA_64.pltoff',10,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .IA_64.pltoff section.',5,'SHF_ALLOC',0,3);
INSERT INTO ElfSections VALUES (55,'.rela.dyn',10,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .dyn section.',5,'SHF_ALLOC',0,3);
INSERT INTO ElfSections VALUES (56,'.got',64,'This section holds the global offset table. See ``Coding Examples\'\' in Chapter 3, ``Special Sections\'\' in Chapter 4, and ``Global Offset Table\'\' in Chapter 5 of the processor supplement for more information.',2,'SHF_ALLOC+SHF_WRITE+SHF_EXECINSTR',0,6);
INSERT INTO ElfSections VALUES (57,'.plt',64,'This section holds the Procedure Linkage Table',9,'SHF_ALLOC+SHF_WRITE+SHF_EXECINSTR',0,6);
INSERT INTO ElfSections VALUES (58,'.sdata',64,'This section holds initialized small data that contribute to the program memory image',2,'SHF_ALLOC+SHF_WRITE',0,6);
INSERT INTO ElfSections VALUES (60,'.rela.dyn',10,'This section holds RELA type relocation information for all sections of a shared library except the PLT',5,'SHF_ALLOC',0,6);
INSERT INTO ElfSections VALUES (61,'.rela.plt',10,'This section holds RELA type relocation information for the PLT section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,6);
INSERT INTO ElfSections VALUES (62,'.got2',10,'This section holds the second level GOT',2,'SHF_ALLOC+SHF_WRITE',0,6);
INSERT INTO ElfSections VALUES (63,'.rela.got',10,'This section holds RELA type relocation information for the GOT section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,6);
INSERT INTO ElfSections VALUES (64,'.rela.sbss',10,'This section holds RELA type relocation information for the SBSS section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,6);
INSERT INTO ElfSections VALUES (65,'.rela.bss',10,'This section holds RELA type relocation information for the BSS section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,6);
INSERT INTO ElfSections VALUES (66,'.rela.got2',10,'This section holds RELA type relocation information for the second level GOT section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,6);
INSERT INTO ElfSections VALUES (67,'.jcr',10,'This section contains information necessary for registering compiled\r\nJava classes.  The contents are compiler-specific and used by compiler\r\ninitialization functions.',2,'SHF_ALLOC+SHF_WRITE',0,1);
INSERT INTO ElfSections VALUES (68,'.got',74,'This section holds the global offset table',2,'SHF_ALLOC+SHF_WRITE',0,10);
INSERT INTO ElfSections VALUES (69,'.plt',74,'This section holds the Procedure Linkage Table',2,'SHF_ALLOC+SHF_EXECINSTR',0,10);
INSERT INTO ElfSections VALUES (70,'.rela.dyn',10,'This section holds RELA type relocation information for all sections of a shared library except the PLT',5,'SHF_ALLOC',0,10);
INSERT INTO ElfSections VALUES (71,'.rela.plt',10,'This section holds RELA type relocation information for the PLT section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,10);
INSERT INTO ElfSections VALUES (72,'.got',68,'This section may be used to hold the Global Offset Table, or GOT.  See The Toc Section and Coding Examples in Chapter 3 and Global Offset Table in Chapter 5 of the processor supplement for more information',2,'SHF_ALLOC+SHF_WRITE',0,9);
INSERT INTO ElfSections VALUES (73,'.plt',68,'This section holds the procedure linkage table. See Procedure Linkage Table in Chapter 5 of the processor supplement for more information',9,'SHF_ALLOC+SHF_WRITE',0,9);
INSERT INTO ElfSections VALUES (74,'.glink',68,'This section may be used to hold the global linkage table which aids the procedure linkage table. See Procedure Linkage Table in Chapter 5 of the processor supplement for more information',2,'SHF_ALLOC+SHF_EXECINSTR',0,9);
INSERT INTO ElfSections VALUES (75,'.toc',68,'This section may be used to hold the initialized Table of Contents, or TOC',2,'SHF_ALLOC+SHF_WRITE',0,9);
INSERT INTO ElfSections VALUES (76,'.tocbss',68,'This section may be used to hold the uninitialized portions of the TOC.  This data may also be stored as zero-initialized data in a .toc section',9,'SHF_ALLOC+SHF_WRITE',0,9);
INSERT INTO ElfSections VALUES (77,'.opd',10,'This section holds function descriptors',2,'SHF_ALLOC+SHF_WRITE',0,9);
INSERT INTO ElfSections VALUES (78,'.rela.dyn',10,'This section holds RELA type relocation information for all sections of a shared library except the PLT',5,'SHF_ALLOC',0,9);
INSERT INTO ElfSections VALUES (79,'.rela.plt',10,'This section holds RELA type relocation information for the PLT section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,9);
INSERT INTO ElfSections VALUES (80,'.toc1',10,'This section holds the second level TOC information',9,'SHF_ALLOC+SHF_WRITE',0,9);
INSERT INTO ElfSections VALUES (81,'.eh_frame_hdr',10,'This section contains a pointer to the .eh_frame section which is accessible to the runtime support code of a C++ application. This section may also contain a binary search table which may be used by the runtime support code to more efficiently access records in the .eh_frame section.',2,'SHF_ALLOC',0,1);
INSERT INTO ElfSections VALUES (82,'.got',78,'This section holds the global offset table',2,'SHF_ALLOC+SHF_WRITE',0,12);
INSERT INTO ElfSections VALUES (83,'.plt',78,'This section holds the procedure linkage table',2,'SHF_ALLOC+SHF_EXECINSTR',0,12);
INSERT INTO ElfSections VALUES (84,'.rela.dyn',10,'This section holds RELA type relocation information for all sections of a shared library except the PLT',5,'SHF_ALLOC',0,12);
INSERT INTO ElfSections VALUES (85,'.rela.plt',10,'This section holds RELA type relocation information for the PLT section of a shared library or dynamically linked application',5,'SHF_ALLOC',0,12);
INSERT INTO ElfSections VALUES (86,'.sbss',10,'This section holds uninitialized data that contribute to the program\'s memory image. The system initializes the data with zeroes when the program begins to run.',9,'SHF_ALLOC+SHF_WRITE',0,6);
INSERT INTO ElfSections VALUES (87,'.sdata2',10,'This section holds the second level of initialised small data',2,'SHF_ALLOC',0,6);
INSERT INTO ElfSections VALUES (88,'.branch_lt',10,'This section holds destination addresses for very long branches',2,'SHF_ALLOC+SHF_WRITE',0,9);
INSERT INTO ElfSections VALUES (89,'.sbss',10,'This section holds uninitialized data that contribute to the program\'s memory image. The system initializes the data with zeroes when the program begins to run.',2,'SHF_WRITE',0,12);
INSERT INTO ElfSections VALUES (90,'.opd',10,'This section holds function descriptors',2,'SHF_ALLOC+SHF_WRITE',0,3);
INSERT INTO ElfSections VALUES (91,'.got',80,'Columbia, SC  An hour and thirty minute drive roundtrip from Orangeburg to Columbia won\'t stop one South Carolina State University professor from getting a chance to work side-by-side with an experienced researcher at the University of South Carolina.  Ruhullah Massoudi, a professor of physical sciences at SC State, will make the commute several times a month to work with James Ritter, an associate professor of chemical engineering at USC.\r\n\r\nMassoudi and Ritter have received funding to focus on the development of a novel nanostructured material that stores hydrogen chemically and reversibly in the solid state.  For many years now, hydrogen has been considered to be the ideal, and perhaps the best, substitute for gasoline-based fuels, mainly because of its environmental friendliness.\r\n\r\n\"Hydrogen is very difficult to store onboard a vehicle, whether as a solid, liquid or gas,\" said Ritter.  \"We hope that such a material will someday have enough hydrogen storage capacity that it could be used to safely and efficiently store hydrogen onboard a vehicle.\"\r\n\r\nBecause of their joint research effort, Massoudi and Ritter will receive more than $100,000 in funds from the South Carolina Experimental Program to Stimulate Competitive Research (SC EPSCoR) program and Biomedical Research Infrastructure Network (SC BRIN).\r\n\r\nThe awards, funded through a joint SC EPSCoR and BRIN initiative, the Collaborative Research Program, enable South Carolina faculty at both public and private institutions of higher education, to develop multi-institutional research teams that will in the future, compete more effectively for research funds from the National Science Foundation and the National Institutes of Health.\r\n\r\nTogether, the SC EPSCoR and BRIN programs will provide more than $750,000 in federal funds to university researchers at USC, Clemson University, and the Medical University of South Carolina.  Matching funds from the universities will bring the total amount awarded to more than $1 million.\r\n\r\nBoth programs announced today that almost thirty researchers from around the state would receive funds to help them work together on complex science and engineering research.  Funds distributed to USC total more than $680,000, and will be used to build collaborations between USC, Benedict College and South Carolina State, the two largest private and public Historically Black Colleges and Universities, respectively, in the state.\r\n\r\nNearly $375,000 will support research at MUSC, including work being conducted by Cynthia Wright and College of Charleston professor Stephanie Dellis.  Wright and Dellis\' work will focus on characterizing the proteins that vaccinia virus uses to activate one particular set of its genes.\r\n\r\nVaccinia is highly related to the smallpox virus and is widely used as a model system to study the biology of the poxviruses.  Their work will help researchers understand the structure and function of these proteins in vaccinia virus, and may help in preventing the use of smallpox as a bioterrorist weapon.\r\n\r\nOther four-year institutions, such as USC-Spartanburg, will also benefit from the awards.  Judy Krueger, an assistant professor of chemistry at USCS, will work with Erin Connolly, an assistant professor of biology at USC, on understanding how plants distribute metals within the different tissues of plants.\r\n\r\n\"Although plants are a major dietary source of essential metals for much of the worlds population, plants are often a poor source of metals; and it\'s estimated that 3 billion people worldwide suffer from iron deficiency,\" said Connolly.  \"Women and children are most often at risk for iron deficiency anemia.\"\r\n\r\nKrueger and Connolly\'s research will hopefully allow for the development of crop plants that contain higher levels of essential metals for enhanced nutrition, and that are better able to grow on nutrient-poor soils.  An added benefit is the development of plants that accumulate toxic metals; such plants would be useful in efforts to clean up soils that are contaminated with toxic metals.\r\n\r\nThe SC EPSCoR program has received funding from the NSF and NIH through competitive programs to develop research activity in states that have historically received low amounts of federal funds.  Current NSF and state funding provides $13.5 million to research programs in materials-based biotechnology, nanotechnology, and structural and chemical biology at Clemson and MUSC.\r\n\r\nNIH EPSCoR funds created the $8 million BRIN program to assist institutions within the state to work together to increase the state\'s capacity to support and conduct biomedical research.',2,'SHF_ALLOC+SHF_WRITE',0,11);
INSERT INTO ElfSections VALUES (92,'.plt',80,'This section holds the procedure linkage table.',2,'SHF_ALLOC+SHF_EXECINSTR',0,11);
INSERT INTO ElfSections VALUES (93,'.rel.bss',31,'This section holds the procedure linkage table.',10,'SHF_ALLOC',0,11);
INSERT INTO ElfSections VALUES (94,'.rel.data',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .data section.',10,'SHF_ALLOC',0,11);
INSERT INTO ElfSections VALUES (95,'.rel.dyn',10,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .dyn section.',10,'SHF_ALLOC',0,11);
INSERT INTO ElfSections VALUES (96,'.rel.got',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .got section.',10,'SHF_ALLOC',0,11);
INSERT INTO ElfSections VALUES (97,'.rel.plt',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .plt section.',10,'SHF_ALLOC',0,11);
INSERT INTO ElfSections VALUES (98,'.rel.text',31,'This section holds relocation information, as described in ``Relocation\'\'. These relocations are applied to the .text section.',10,'SHF_ALLOC',0,11);
