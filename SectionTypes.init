INSERT INTO SectionTypes VALUES (1,'SHT_NULL',0,31,'This value marks the section header as inactive; it does not have an associated section. Other members of the section header have undefined values.',1);
INSERT INTO SectionTypes VALUES (2,'SHT_PROGBITS',1,31,'The section holds information defined by the program, whose format and meaning are determined solely by the program.',1);
INSERT INTO SectionTypes VALUES (3,'SHT_SYMTAB',2,31,'These sections hold a symbol table. Currently, an object file may have only one section of each type, but this restriction may be relaxed in the future. Typically, SHT_SYMTAB provides symbols for link editing, though it may also be used for dynamic linking.',1);
INSERT INTO SectionTypes VALUES (4,'SHT_STRTAB',3,31,'The section holds a string table. An object file may have multiple string table sections. See ``String Table\'\' below for details.',1);
INSERT INTO SectionTypes VALUES (5,'SHT_RELA',4,31,'The section holds relocation entries with explicit addends, such as type Elf32_Rela for the 32-bit class of object files or type Elf64_Rela for the 64-bit class of object files. An object file may have multiple relocation sections. ``Relocation\'\' b',1);
INSERT INTO SectionTypes VALUES (6,'SHT_HASH',5,31,'The section holds a symbol hash table. Currently, an object file may have only one hash table, but this restriction may be relaxed in the future. See ``Hash Table\'\' in the Chapter 5 for details.',1);
INSERT INTO SectionTypes VALUES (7,'SHT_DYNAMIC',6,31,'The section holds information for dynamic linking. Currently, an object file may have only one dynamic section, but this restriction may be relaxed in the future. See ``Dynamic Section\'\' in Chapter 5 for details.',1);
INSERT INTO SectionTypes VALUES (8,'SHT_NOTE',7,31,'The section holds information that marks the file in some way. See ``Note Section\'\' in Chapter 5 for details.',1);
INSERT INTO SectionTypes VALUES (9,'SHT_NOBITS',8,31,'A section of this type occupies no space in the file but otherwise resembles SHT_PROGBITS. Although this section contains no bytes, the sh_offset member contains the conceptual file offset.',1);
INSERT INTO SectionTypes VALUES (10,'SHT_REL',9,31,'The section holds relocation entries without explicit addends, such as type Elf32_Rel for the 32-bit class of object files or type Elf64_Rel for the 64-bit class of object files. An object file may have multiple relocation sections. See \"Relocation\"',1);
INSERT INTO SectionTypes VALUES (11,'SHT_SHLIB',10,31,'This section type is reserved but has unspecified semantics.',1);
INSERT INTO SectionTypes VALUES (12,'SHT_DYNSYM',11,31,'',1);
INSERT INTO SectionTypes VALUES (13,'SHT_LOPROC',1879048192,31,'Values in this inclusive range are reserved for processor-specific semantics.',1);
INSERT INTO SectionTypes VALUES (14,'SHT_HIPROC',2147483647,31,'Values in this inclusive range are reserved for processor-specific semantics.',1);
INSERT INTO SectionTypes VALUES (15,'SHT_LOUSER',2147483648,31,'This value specifies the lower bound of the range of indexes reserved for application programs.',1);
INSERT INTO SectionTypes VALUES (16,'SHT_HIUSER',4294967295,31,'This value specifies the upper bound of the range of indexes reserved for application programs. Section types between SHT_LOUSER and SHT_HIUSER may be used by the application, without conflicting with current or future system-defined section types.',1);
INSERT INTO SectionTypes VALUES (17,'SHT_GNU_verdef',1879048189,10,'This section contains the symbol versions that are provided.',1);
INSERT INTO SectionTypes VALUES (18,'SHT_GNU_verneed',1879048190,10,'This section contains the symbol versions that are required.',1);
INSERT INTO SectionTypes VALUES (19,'SHT_GNU_versym',1879048191,10,'This section contains the Symbol Version Table.',1);
INSERT INTO SectionTypes VALUES (21,'SHT_INIT_ARRAY',14,31,'This section contains an array of pointers to initialization functions, as described in ``Initialization and Termination Functions\'\' in Chapter 5. Each pointer in the array is taken as a parameterless procedure with a void return.',1);
INSERT INTO SectionTypes VALUES (22,'SHT_FINI_ARRAY',15,31,'This section contains an array of pointers to termination functions, as described in ``Initialization and Termination Functions\'\' in Chapter 5. Each pointer in the array is taken as a parameterless procedure with a void return.',1);
INSERT INTO SectionTypes VALUES (23,'SHT_PREINIT_ARRAY',16,31,'This section contains an array of pointers to functions that are invoked before all other initialization functions, as described in ``Initialization and Termination Functions\'\' in Chapter 5. Each pointer in the array is taken as a parameterless proceure with a void return.',1);
INSERT INTO SectionTypes VALUES (24,'SHT_IA_64_UNWIND',1879048193,58,'This section contains unwind function table entries for stack unwinding.',3);
INSERT INTO SectionTypes VALUES (25,'SHT_IA_64_LOPSREG',2013265920,58,'Sections in the range SHT_IA_64_LOPSREG to SHT_IA_64_HIPSREG are reserved for implementation specific section types. None are defined for LSB conforming implementations.',3);
INSERT INTO SectionTypes VALUES (26,'SHT_IA_64_PRIORITY_INIT',2030043136,58,'This section contains priority initialization records, as described in the Intel (R) Itanium (tm) Processor Specific ABI. LSB conforming implementations are not required to support this section type, beyond the generic requirments for the handling of unrecognized section types.',3);
INSERT INTO SectionTypes VALUES (27,'SHT_IA_64_EXT',1879048192,58,'This section\r\ncontains processor specific extension bits. These consist of at least one\r\n64-bit word of attribute flags that identify specific non-architectural extensions that are required by the object code.',3);
